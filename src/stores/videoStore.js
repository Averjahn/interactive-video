import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { videoConfig } from '@/config/videoConfig'

export const useVideoStore = defineStore('video', () => {
  // ========================================
  // STATE
  // ========================================
  
  const currentVideoSrc = ref(videoConfig.videoFragments.rh1)
  const currentTime = ref(0)
  const duration = ref(0)
  const isLoading = ref(false)
  const isTransitioning = ref(false)
  const showChoices = ref(false)
  const hasShownChoice = ref(false)
  const transitionText = ref('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...')
  const currentVideoId = ref('rh1')
  const videoHistory = ref([])
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ config
  const videos = ref(videoConfig.videoFragments)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const videosLoaded = ref({
    rh1: false,
    rh2: false,
    rh3: false,
    rh4: false
  })
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
  const preloadedVideos = ref({
    rh1: null,
    rh2: null,
    rh3: null,
    rh4: null
  })
  
  // –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const loadingLogs = ref([])
  
  // ========================================
  // COMPUTED
  // ========================================
  
  const progressPercentage = computed(() => {
    if (duration.value === 0) return 0
    return (currentTime.value / duration.value) * 100
  })
  
  const allVideosLoaded = computed(() => {
    return Object.values(videosLoaded.value).every(loaded => loaded)
  })
  
  // ========================================
  // ACTIONS
  // ========================================
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  function addLoadingLog(videoType, event, message, details = null) {
    const timestamp = new Date().toLocaleTimeString('ru-RU', { 
      hour12: false, 
      hour: '2-digit', 
      minute: '2-digit', 
      second: '2-digit',
      fractionalSecondDigits: 3
    })
    
    const logEntry = {
      time: timestamp,
      video: videoType,
      event: event,
      message: message,
      timestamp: Date.now(),
      details: details
    }
    
    loadingLogs.value.push(logEntry)
    
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const colors = {
      rh1: '#ff6b6b',
      rh2: '#00b894', 
      rh3: '#fdcb6e',
      rh4: '#a29bfe',
      main: '#ff6b6b',
      second: '#00b894', 
      third: '#fdcb6e',
      start: '#74b9ff',
      metadata: '#a29bfe',
      canplay: '#00b894',
      error: '#e17055',
      choice: '#9b59b6'
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –≤–∏–¥–µ–æ
   */
  function preloadVideos() {
    addLoadingLog('main', 'start', 'üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ')
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç
    videosLoaded.value.main = true
    addLoadingLog('main', 'metadata', '‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
    addLoadingLog('second', 'start', 'üì• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É Second Video...')
    addLoadingLog('third', 'start', 'üì• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É Third Video...')
  }
  
  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
   */
  function preloadVideo(videoType) {
    addLoadingLog(videoType, 'start', `üîç –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–æ –≤ DOM`)
    addLoadingLog(videoType, 'start', `üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞`)
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
   */
  function setupVideoEventListeners(videoElement, videoType) {
    // –°–æ–±—ã—Ç–∏–µ: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    videoElement.addEventListener('loadstart', () => {
      addLoadingLog(videoType, 'start', `üåê –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞`, {
        src: videoElement.src,
        networkState: videoElement.networkState,
        readyState: videoElement.readyState
      })
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    videoElement.addEventListener('loadedmetadata', () => {
      const duration = videoElement.duration
      const videoWidth = videoElement.videoWidth
      const videoHeight = videoElement.videoHeight
      addLoadingLog(videoType, 'metadata', `üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration.toFixed(2)}—Å)`, {
        duration: duration,
        dimensions: `${videoWidth}x${videoHeight}`,
        readyState: videoElement.readyState
      })
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–≤—ã–µ –∫–∞–¥—Ä—ã
    videoElement.addEventListener('canplay', () => {
      addLoadingLog(videoType, 'canplay', `‚ñ∂Ô∏è –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é`, {
        readyState: videoElement.readyState,
        networkState: videoElement.networkState,
        buffered: videoElement.buffered.length > 0 ? videoElement.buffered.end(0) : 0
      })
      videosLoaded.value[videoType] = true
      preloadedVideos.value[videoType] = videoElement
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    videoElement.addEventListener('canplaythrough', () => {
      addLoadingLog(videoType, 'canplay', `üéØ –í–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é`, {
        readyState: videoElement.readyState,
        networkState: videoElement.networkState
      })
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    videoElement.addEventListener('error', (error) => {
      const errorDetails = {
        error: error,
        code: videoElement.error?.code,
        message: videoElement.error?.message,
        networkState: videoElement.networkState,
        readyState: videoElement.readyState
      }
      addLoadingLog(videoType, 'error', `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, errorDetails)
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    videoElement.addEventListener('progress', () => {
      if (videoElement.buffered.length > 0) {
        const buffered = videoElement.buffered.end(0)
        const duration = videoElement.duration
        const progress = duration > 0 ? (buffered / duration * 100).toFixed(1) : 0
        addLoadingLog(videoType, 'start', `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}%`, {
          buffered: buffered,
          duration: duration,
          progress: progress
        })
      }
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    videoElement.addEventListener('suspend', () => {
      addLoadingLog(videoType, 'start', `‚è∏Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`, {
        networkState: videoElement.networkState,
        readyState: videoElement.readyState
      })
    })
    
    // –°–æ–±—ã—Ç–∏–µ: –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    videoElement.addEventListener('stalled', () => {
      addLoadingLog(videoType, 'start', `‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Å—Ç—Ä—è–ª–∞`, {
        networkState: videoElement.networkState,
        readyState: videoElement.readyState
      })
    })
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–µ–æ
   */
  function switchVideo(videoType, transitionText = '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...') {
    const videoSrc = videos.value[videoType]
    const isLoaded = videosLoaded.value[videoType]
    
    addLoadingLog(videoType, 'start', `üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ ${videoType} –≤–∏–¥–µ–æ`)
    
    if (!isLoaded) {
      addLoadingLog(videoType, 'error', `‚ùå –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`)
      return false
    }
    
    addLoadingLog(videoType, 'start', `‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ`)
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    showChoices.value = false
    isTransitioning.value = true
    transitionText.value = transitionText
    addLoadingLog(videoType, 'start', `üëÅÔ∏è –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥`)
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
    currentVideoSrc.value = videoSrc
    hasShownChoice.value = false
    currentTime.value = 0
    addLoadingLog(videoType, 'start', `üé¨ –ú–µ–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ –Ω–∞: ${videoSrc}`)
    
    return true
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  function updateTime(time) {
    currentTime.value = time
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
   */
  function updateDuration(newDuration) {
    duration.value = newDuration
  }
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞
   */
  function showChoice() {
    showChoices.value = true
    hasShownChoice.value = true
    addLoadingLog('main', 'start', `üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ, —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É`)
  }
  
  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞
   */
  function hideChoice() {
    showChoices.value = false
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  function setLoading(loading) {
    isLoading.value = loading
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  function setTransitioning(transitioning) {
    isTransitioning.value = transitioning
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
   */
  function resetChoiceState() {
    hasShownChoice.value = false
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ ID
   */
  function switchToVideo(videoId, transitionMessage = '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...') {
    const videoSrc = videos.value[videoId]
    
    if (!videoSrc) {
      addLoadingLog(videoId, 'error', `‚ùå –í–∏–¥–µ–æ —Å ID ${videoId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, {
        availableVideos: Object.keys(videos.value),
        requestedVideo: videoId
      })
      return false
    }
    
    addLoadingLog(videoId, 'start', `üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ ${videoId}`, {
      from: currentVideoId.value,
      to: videoId,
      src: videoSrc,
      isLoaded: videosLoaded.value[videoId]
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const historyEntry = {
      from: currentVideoId.value,
      to: videoId,
      timestamp: Date.now()
    }
    videoHistory.value.push(historyEntry)
    
    addLoadingLog('system', 'start', `üìö –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, {
      totalTransitions: videoHistory.value.length,
      lastTransition: historyEntry
    })
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
    showChoices.value = false
    isTransitioning.value = true
    transitionText.value = transitionMessage
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
    currentVideoSrc.value = videoSrc
    currentVideoId.value = videoId
    hasShownChoice.value = false
    currentTime.value = 0
    
    addLoadingLog(videoId, 'start', `üé¨ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: ${videoSrc}`, {
      newSrc: videoSrc,
      newVideoId: videoId,
      transitionMessage: transitionMessage
    })
    
    return true
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
   */
  function shouldShowMidChoice(currentTime, videoId) {
    return videoId === 'rh1' && currentTime >= 15 && !hasShownChoice.value
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ü–µ –≤–∏–¥–µ–æ
   */
  function shouldShowEndChoice(videoId) {
    return ['rh1', 'rh2', 'rh3', 'rh4'].includes(videoId)
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –≤—ã–±–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
   */
  function getChoiceType(videoId, isEndChoice = false) {
    if (videoId === 'rh1' && !isEndChoice) return 'style-choice'
    if (['rh1', 'rh2'].includes(videoId) && isEndChoice) return 'content-choice'
    if (['rh3', 'rh4'].includes(videoId)) return 'restart-choice'
    return null
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
   */
  function resetToStart() {
    addLoadingLog('system', 'start', 'üîÑ –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é')
    videoHistory.value = []
    switchToVideo('rh1', '–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É...')
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã–±–æ—Ä–æ–≤ –∏–∑ config
   */
  function getChoiceConfig() {
    return videoConfig.choicePoints
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–µ–µ—Ä–∞ –∏–∑ config
   */
  function getPlayerConfig() {
    return videoConfig.playerSettings
  }
  
  return {
    // State
    currentVideoSrc,
    currentTime,
    duration,
    isLoading,
    isTransitioning,
    showChoices,
    hasShownChoice,
    transitionText,
    currentVideoId,
    videoHistory,
    videos,
    videosLoaded,
    preloadedVideos,
    loadingLogs,
    
    // Computed
    progressPercentage,
    allVideosLoaded,
    
    // Actions
    addLoadingLog,
    preloadVideos,
    preloadVideo,
    setupVideoEventListeners,
    switchVideo,
    updateTime,
    updateDuration,
    showChoice,
    hideChoice,
    setLoading,
    setTransitioning,
    resetChoiceState,
    switchToVideo,
    shouldShowMidChoice,
    shouldShowEndChoice,
    getChoiceType,
    resetToStart,
    getChoiceConfig,
    getPlayerConfig
  }
})

